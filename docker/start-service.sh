#!/bin/bash
# start-service.sh - One-command startup for PD Graphiti Service
# Automatically detects paths and starts the service

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    PD Graphiti Service                       ‚ïë"
    echo "‚ïë              Portable Docker Deployment                     ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        exit 1
    fi
    
    # Check Docker Compose
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not available"
        exit 1
    fi
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Auto-detect export path
detect_export_path() {
    log_info "Auto-detecting export directory..."
    
    local export_paths=(
        # Check environment variable first
        "$EXPORT_SOURCE_PATH"
        # Check relative paths from docker directory
        "$SCRIPT_DIR/../../pd-target-identification/src/exports"
        "$SCRIPT_DIR/../../../pd-target-identification/src/exports"
        # Check if we're in pd-target-identification already
        "$SCRIPT_DIR/../src/exports"
        "$SCRIPT_DIR/src/exports"
        # Check current directory
        "$(pwd)/src/exports"
        "$(pwd)/pd-target-identification/src/exports"
        "$(pwd)/../pd-target-identification/src/exports"
    )
    
    for path in "${export_paths[@]}"; do
        if [[ -n "$path" ]] && [[ -d "$path" ]]; then
            local real_path
            real_path=$(realpath "$path" 2>/dev/null || echo "$path")
            log_success "Found export directory: $real_path"
            echo "$real_path"
            return 0
        fi
    done
    
    return 1
}

# Interactive path selection
prompt_for_path() {
    log_warning "Could not auto-detect export directory."
    echo ""
    echo "Please provide the path to your pd-target-identification/src/exports directory:"
    echo "Example: /Users/yourname/projects/pd-target-identification/src/exports"
    echo ""
    read -r -p "Export path: " user_path
    
    if [[ -d "$user_path" ]]; then
        local real_path
        real_path=$(realpath "$user_path")
        log_success "Using provided path: $real_path"
        echo "$real_path"
        return 0
    else
        log_error "Directory does not exist: $user_path"
        return 1
    fi
}

# Setup environment
setup_environment() {
    local export_path="$1"
    
    # Create .env file
    local env_file="$SCRIPT_DIR/.env"
    log_info "Creating environment configuration..."
    
    cat > "$env_file" << EOF
# Auto-generated by start-service.sh
# Export path configuration
EXPORT_SOURCE_PATH=$export_path

# Service configuration
SERVICE_PORT=8002
METRICS_PORT=8003

# Neo4j configuration  
NEO4J_HTTP_PORT=7475
NEO4J_BOLT_PORT=7688
NEO4J_USER=neo4j
NEO4J_PASSWORD=testpassword123

# Application configuration
GRAPHITI_GROUP_ID=pd_target_discovery
LOG_LEVEL=INFO
LOG_FORMAT=json

# Monitoring
ENABLE_MONITORING=true
ENABLE_PROMETHEUS=true
ENABLE_REQUEST_LOGGING=true

# OpenAI (you need to set this separately)
# OPENAI_API_KEY=your_key_here
EOF
    
    log_success "Created $env_file"
    
    # Check for OpenAI API key
    if [[ -z "$OPENAI_API_KEY" ]]; then
        log_warning "OPENAI_API_KEY environment variable is not set"
        log_info "You can set it with: export OPENAI_API_KEY=your_key_here"
        log_info "Or add it to the .env file"
    fi
}

# Start services
start_services() {
    log_info "Starting PD Graphiti Service..."
    
    cd "$SCRIPT_DIR"
    
    # Choose docker-compose file
    local compose_file="docker-compose.yml"
    if [[ -f "docker-compose.portable.yml" ]]; then
        compose_file="docker-compose.portable.yml"
        log_info "Using portable Docker Compose configuration"
    fi
    
    # Stop any existing services
    docker compose -f "$compose_file" down --remove-orphans 2>/dev/null || true
    
    # Start services
    docker compose -f "$compose_file" up -d
    
    log_success "Services started successfully!"
    
    # Wait a moment and check health
    log_info "Waiting for services to be ready..."
    sleep 10
    
    # Check service health
    if curl -s http://localhost:8002/health > /dev/null; then
        log_success "Service is healthy and responding!"
        echo ""
        log_info "üåê Service URLs:"
        echo "   ‚Ä¢ Main API: http://localhost:8002"
        echo "   ‚Ä¢ API Documentation: http://localhost:8002/docs"
        echo "   ‚Ä¢ Health Check: http://localhost:8002/health"
        echo "   ‚Ä¢ Neo4j Browser: http://localhost:7475"
        echo ""
        log_info "üîß Useful commands:"
        echo "   ‚Ä¢ View logs: docker compose -f $compose_file logs -f"
        echo "   ‚Ä¢ Stop services: docker compose -f $compose_file down"
        echo "   ‚Ä¢ Check status: docker compose -f $compose_file ps"
    else
        log_warning "Service may still be starting up. Check logs with:"
        echo "   docker compose -f $compose_file logs -f pd-graphiti-service"
    fi
}

# Main execution
main() {
    print_header
    
    # Handle command line arguments
    case "${1:-}" in
        "--help"|"-h")
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h     Show this help message"
            echo "  --stop         Stop the services"
            echo "  --restart      Restart the services"
            echo "  --logs         Show service logs"
            echo ""
            echo "This script automatically detects the pd-target-identification export"
            echo "directory and starts the PD Graphiti Service with proper configuration."
            exit 0
            ;;
        "--stop")
            log_info "Stopping services..."
            cd "$SCRIPT_DIR"
            docker compose down
            log_success "Services stopped"
            exit 0
            ;;
        "--restart")
            log_info "Restarting services..."
            cd "$SCRIPT_DIR"
            docker compose down
            sleep 2
            docker compose up -d
            log_success "Services restarted"
            exit 0
            ;;
        "--logs")
            cd "$SCRIPT_DIR"
            docker compose logs -f
            exit 0
            ;;
    esac
    
    check_prerequisites
    
    # Detect or prompt for export path
    local export_path
    if export_path=$(detect_export_path); then
        log_success "Export path detected automatically"
    elif export_path=$(prompt_for_path); then
        log_success "Export path provided by user"
    else
        log_error "Failed to determine export path"
        exit 1
    fi
    
    setup_environment "$export_path"
    start_services
    
    log_success "üéâ PD Graphiti Service is ready to use!"
}

main "$@"