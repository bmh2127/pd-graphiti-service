apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pd-graphiti-ingress
  namespace: pd-graphiti
  labels:
    app.kubernetes.io/name: pd-graphiti-service
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: pd-graphiti-platform
  annotations:
    # Nginx Ingress Controller annotations
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # TLS configuration (requires cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Health check configuration
    nginx.ingress.kubernetes.io/upstream-health-check: "true"
    nginx.ingress.kubernetes.io/upstream-health-check-path: "/health/live"
    
    # CORS (if needed)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - pd-graphiti.yourdomain.com  # CHANGE THIS to your domain
    secretName: pd-graphiti-tls
  rules:
  - host: pd-graphiti.yourdomain.com  # CHANGE THIS to your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pd-graphiti-service
            port:
              number: 80

---
# Alternative: Traefik Ingress (uncomment if using Traefik)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: pd-graphiti-ingress-traefik
#   namespace: pd-graphiti
#   annotations:
#     kubernetes.io/ingress.class: traefik
#     traefik.ingress.kubernetes.io/router.tls: "true"
#     traefik.ingress.kubernetes.io/router.tls.certresolver: "letsencrypt"
#     traefik.ingress.kubernetes.io/router.middlewares: "pd-graphiti-ratelimit@kubernetescrd"
# spec:
#   tls:
#   - hosts:
#     - pd-graphiti.yourdomain.com
#     secretName: pd-graphiti-tls-traefik
#   rules:
#   - host: pd-graphiti.yourdomain.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: pd-graphiti-service
#             port:
#               number: 80

---
# Network Policy for ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pd-graphiti-ingress-netpol
  namespace: pd-graphiti
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pd-graphiti-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress controller traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Adjust based on your ingress controller namespace
    ports:
    - protocol: TCP
      port: 8000
  # Allow metrics scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring  # Adjust based on your monitoring namespace
    ports:
    - protocol: TCP
      port: 8001
  # Allow internal cluster communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: pd-graphiti
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8001
  egress:
  # Allow communication to Neo4j
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: neo4j
    ports:
    - protocol: TCP
      port: 7687
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external APIs (OpenAI)
  - to: []
    ports:
    - protocol: TCP
      port: 443