apiVersion: apps/v1
kind: Deployment
metadata:
  name: pd-graphiti-service
  namespace: pd-graphiti
  labels:
    app.kubernetes.io/name: pd-graphiti-service
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: pd-graphiti-platform
    app.kubernetes.io/version: "0.1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pd-graphiti-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pd-graphiti-service
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        # Force pod restart on config changes
        configmap/checksum: placeholder-for-config-hash
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
      serviceAccountName: default
      containers:
      - name: pd-graphiti-service
        image: pd-graphiti-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: pd-graphiti-secrets
              key: OPENAI_API_KEY
              optional: false
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pd-graphiti-secrets
              key: NEO4J_PASSWORD
              optional: false
        envFrom:
        - configMapRef:
            name: pd-graphiti-config
        volumeMounts:
        - name: exports
          mountPath: /app/exports
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/live
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # 60 seconds total
          successThreshold: 1
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: exports
        emptyDir:
          sizeLimit: "10Gi"
      - name: logs
        emptyDir:
          sizeLimit: "5Gi"
      - name: data
        emptyDir:
          sizeLimit: "5Gi"
      - name: tmp
        emptyDir:
          sizeLimit: "1Gi"
      terminationGracePeriodSeconds: 30
      restartPolicy: Always